# Import necessary libraries
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns


# Fetch historical data for TLT and SPY
start_date = '2020-01-01'  # You can adjust the start date
end_date = '2023-12-01'    # You can adjust the end date

tlt = yf.download('TLT', start=start_date, end=end_date)
spy = yf.download('SPY', start=start_date, end=end_date)

# Correlation Analysis
# Use closing prices for correlation
closing_prices = pd.DataFrame({
    'TLT': tlt['Close'],
    'SPY': spy['Close']
})
correlation = closing_prices.corr()
print("Correlation Matrix:\n", correlation)

# Time Series Analysis
plt.figure(figsize=(14, 7))
plt.plot(closing_prices['TLT'], label='TLT')
plt.plot(closing_prices['SPY'], label='SPY')
plt.title('TLT and SPY Time Series')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

# Volatility Analysis
# Calculate rolling 30-day standard deviation of daily returns
rolling_window = 30  # days
daily_returns = closing_prices.pct_change()
rolling_volatility = daily_returns.rolling(window=rolling_window).std()

plt.figure(figsize=(14, 7))
plt.plot(rolling_volatility['TLT'], label='TLT Volatility')
plt.plot(rolling_volatility['SPY'], label='SPY Volatility')
plt.title('30-Day Rolling Volatility of TLT and SPY')
plt.xlabel('Date')
plt.ylabel('Volatility (Std Dev of Daily Returns)')
plt.legend()
plt.show()

# Fetch historical data for SPY and TLT
spy = yf.download('SPY', period='20y')['Close']
tlt = yf.download('TLT', period='20y')['Close']

# Align the datasets by date
data = pd.DataFrame({'SPY': spy, 'TLT': tlt}).dropna()

# Calculate daily returns
data['SPY_returns'] = data['SPY'].pct_change() * 100
data['TLT_returns'] = data['TLT'].pct_change() * 100

# Drop any NaN/Infinite values generated by percentage change
data.replace([np.inf, -np.inf], np.nan, inplace=True)
data.dropna(inplace=True)

# Calculate correlation
correlation = data[['SPY_returns', 'TLT_returns']].corr()

# Create a pairplot to visualize the relationship
sns.pairplot(data[['SPY_returns', 'TLT_returns']])

# Create a scatter plot with a regression line to visualize the correlation
plt.figure(figsize=(10, 6))
sns.regplot(x='TLT_returns', y='SPY_returns', data=data, line_kws={'color': 'red'})
plt.title('SPY vs TLT Daily Returns')
plt.xlabel('TLT Daily Returns (%)')
plt.ylabel('SPY Daily Returns (%)')

# Show the plot
plt.show()


